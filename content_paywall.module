<?php

define('CONTENT_PAYWALL_FIELD', 'field_premium_options');

/**
 * Implements hook_menu().
 */
function content_paywall_menu() {
  $items['admin/config/content_paywall'] = array(
    'title' => 'Content Paywall',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('content_paywall_admin_settings_form'),
    'access arguments' => array('administer content_paywall'),
    'file' => 'content_paywall.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_node_view().
 */
function content_paywall_node_view($node, $view_mode, $langcode) {
  $field_lang = field_language('node', $node, CONTENT_PAYWALL_FIELD);
  $is_subscriber = user_access('access premium content');
  if ((!$is_subscriber)
      && arg(0) == 'node'
      && is_numeric(arg(1))
      && $node->nid == arg(1) // Node being rendered is the page node.
      && arg(2) == NULL // Not edit screen.
      && isset($node->{CONTENT_PAYWALL_FIELD}[$field_lang][0]['value'])) {
    $content_restriction_type = $node->{CONTENT_PAYWALL_FIELD}[$field_lang][0]['value'];
    if ($content_restriction_type == 'free') {
      return; // Exclude the free content.
    }
    drupal_add_library('system', 'jquery.cookie');
    $access_type = in_array($content_restriction_type, array('metered_permanently', 'metered_timed')) ? 'metered' : 'premium';
    $access_denied_msg = content_paywall_get_paywall_message($access_type);
    $settings_array = array(
      'paragraphs_allowed' => variable_get('content_paywall_truncation_paragraphs', 3) - 1,
      'minimum_paragraph' => variable_get('content_paywall_paragraph_min_chars', 140),
      'content_deselectors' => content_paywall_get_deselectors(),
      'content_selector' => variable_get('content_paywall_content_selector', '.field-name-body'),
      'expiry' => variable_get('content_paywall_metered_access_reset', 60),
      'nid' => arg(1),
      'article_limit' => variable_get('content_paywall_article_limit', 3),
      'access_denied_msg' => $access_denied_msg,
      'content_restriction_type' => $content_restriction_type,
      'block_tags' => content_paywall_get_block_tags(),
    );
    drupal_add_js(array('content_paywall' => $settings_array), 'setting');
    $this_path = drupal_get_path('module', 'content_paywall');
    drupal_add_js("{$this_path}/js/content_paywall.js", array('weight' => -10));
    if (variable_get('content_paywall_is_debug', 0)) { // Add debug classes to body.
      global $user;
      $settings_array_debug = array(
        'subscriber_access_check' => (int) $is_subscriber,
        'username' => isset($user->name) ? $user->name : 'anonymous',
        'session' => isset($user->session) ? $user->session : 'NULL',
        'roles' => json_encode($user->roles),
      );
      drupal_add_js(array('content_paywall_debug' => $settings_array_debug), 'setting');
      drupal_add_js("{$this_path}/js/content_paywall_debug.js");
    }
  }
}

/**
 * Implements hook_permission().
 */
function content_paywall_permission() {
  return array(
    'administer content_paywall' => array(
      'title' => t('Administer Paywall'),
      'description' => t('Administer the Content Paywall module.'),
    ),
    'access premium content' => array(
      'title' => t('Access Premium Content'),
      'description' => t('Access paywalled/premium content.'),
    ),
  );
}

/**
 * Fetches the deselectors from the global variable, to be passed to jQuery.
 *
 * @return string: jQuery selector or empty string.
 */
function content_paywall_get_deselectors() {
  $deselectors_array = array();
  foreach (explode(',', variable_get('content_paywall_content_deselectors', '')) as $i => $deselector) {
    if (!empty($deselector)) {
      $deselectors_array[$i] = ':not(' . trim($deselectors_array[$i]) . ')';
    }
  }
  return implode($deselectors_array);
}

/**
 * Returns the settings for block tags from content_paywall system var.
 *
 * @return string Json-encoded array of tags considered block tags.
 */
function content_paywall_get_block_tags() {
  $block_tags_array = explode( ',', variable_get('content_paywall_block_tags', 'p'));
  foreach ($block_tags_array as $i => $tag) {
    $block_tags_array[$i] = trim($block_tags_array[$i]);
  }
  return json_encode($block_tags_array);
}

/**
 * Returns the HTML inserted into truncated content from global var. Can vary
 * if set in settings.
 *
 * @param string $type: The message type, 'metered' or 'premium'
 *
 * @return string
 */
function content_paywall_get_paywall_message($type = 'premium') {
  //@TODO add config stuff here for popup, etc
  $access_denied_msg = ($type == 'metered') ? content_paywall_variable_get_richtext('content_paywall_message_metered') : content_paywall_variable_get_richtext('content_paywall_message_premium');
  $limit_class = ($type == 'metered') ? ' cc-paywall--limit' : '';
  return "<aside class='cc-paywall{$limit_class}'>{$access_denied_msg}</aside>";
}

/**
 * Gets an HTML-formatted string from system variable.
 *
 * @param $varname string: Name of variable to get.
 *
 * @return string HTML.
 */
function content_paywall_variable_get_richtext($varname) {
  $richtext_array = variable_get($varname, '');
  return is_array($richtext_array) ? check_markup($richtext_array['value'], $richtext_array['format']) : '';
}

/**
 * Implementation of hook_cron().
 *
 * Moves content from 'metered (becomes premium)' status to 'premium'.
 */
function content_paywall_cron() {
  $time_until_moved_to_premium = variable_get('content_paywall_metered_timeout', NULL);
  $must_be_created_before = time() - ($time_until_moved_to_premium * 84600);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->propertyCondition('created', $must_be_created_before, '<')
        ->fieldCondition(CONTENT_PAYWALL_FIELD, 'value', 'metered_timed', '=');
  $results = $query->execute();
  $count = 0;
  foreach ($results as $type) {
    foreach ($type as $nid => $result) {
      try {
        $node_w = entity_metadata_wrapper('node', $nid);
        $node_w->{CONTENT_PAYWALL_FIELD} = 'premium';
        $node_w->save();
        $count++;
      } catch (EntityMetadataWrapperException $e) {
        watchdog('EntityMetadataWrapperException @msg', array('@msg' => $e->getTraceAsString() . ': ' . $e->getTraceAsString()));
      }
    }
  }
  // Log how many nodes were updated.
  if ($count == 0) {
    watchdog('content_paywall', 'content_paywall cron updated @count nodes at ' . date('g:ia', time()), array('@count' => $count), WATCHDOG_NOTICE, $link = NULL);
  }
}